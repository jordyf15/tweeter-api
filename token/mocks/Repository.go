// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/jordyf15/tweeter-api/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tokenSet
func (_m *Repository) Create(tokenSet *models.TokenSet) error {
	ret := _m.Called(tokenSet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TokenSet) error); ok {
		r0 = rf(tokenSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: tokenSet
func (_m *Repository) Delete(tokenSet *models.TokenSet) error {
	ret := _m.Called(tokenSet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TokenSet) error); ok {
		r0 = rf(tokenSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: accessToken
func (_m *Repository) Exists(accessToken *models.AccessToken) bool {
	ret := _m.Called(accessToken)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.AccessToken) bool); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetTokenSet provides a mock function with given fields: userID, hashedRefreshTokenID, includeParent
func (_m *Repository) GetTokenSet(userID string, hashedRefreshTokenID string, includeParent bool) (*models.TokenSet, error) {
	ret := _m.Called(userID, hashedRefreshTokenID, includeParent)

	var r0 *models.TokenSet
	if rf, ok := ret.Get(0).(func(string, string, bool) *models.TokenSet); ok {
		r0 = rf(userID, hashedRefreshTokenID, includeParent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(userID, hashedRefreshTokenID, includeParent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimitTokenCount provides a mock function with given fields: userID, limit
func (_m *Repository) LimitTokenCount(userID string, limit uint) error {
	ret := _m.Called(userID, limit)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(userID, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: accessToken
func (_m *Repository) Remove(accessToken *models.AccessToken) error {
	ret := _m.Called(accessToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccessToken) error); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: accessToken
func (_m *Repository) Save(accessToken *models.AccessToken) error {
	ret := _m.Called(accessToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccessToken) error); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: tokenSet
func (_m *Repository) Update(tokenSet *models.TokenSet) error {
	ret := _m.Called(tokenSet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TokenSet) error); ok {
		r0 = rf(tokenSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Updates provides a mock function with given fields: tokenSet, changes
func (_m *Repository) Updates(tokenSet *models.TokenSet, changes map[string]interface{}) error {
	ret := _m.Called(tokenSet, changes)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TokenSet, map[string]interface{}) error); ok {
		r0 = rf(tokenSet, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
