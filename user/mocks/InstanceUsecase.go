// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/jordyf15/tweeter-api/models"
	mock "github.com/stretchr/testify/mock"
)

// InstanceUsecase is an autogenerated mock type for the InstanceUsecase type
type InstanceUsecase struct {
	mock.Mock
}

// GenerateTokens provides a mock function with given fields:
func (_m *InstanceUsecase) GenerateTokens() (*models.AccessToken, *models.RefreshToken, error) {
	ret := _m.Called()

	var r0 *models.AccessToken
	if rf, ok := ret.Get(0).(func() *models.AccessToken); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccessToken)
		}
	}

	var r1 *models.RefreshToken
	if rf, ok := ret.Get(1).(func() *models.RefreshToken); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.RefreshToken)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewInstanceUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewInstanceUsecase creates a new instance of InstanceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInstanceUsecase(t mockConstructorTestingTNewInstanceUsecase) *InstanceUsecase {
	mock := &InstanceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
