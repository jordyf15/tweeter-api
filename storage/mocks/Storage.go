// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"

	models "github.com/jordyf15/tweeter-api/models"
	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AssignImageURLToUser provides a mock function with given fields: model
func (_m *Storage) AssignImageURLToUser(model *models.User) {
	_m.Called(model)
}

// GetFileLink provides a mock function with given fields: key
func (_m *Storage) GetFileLink(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFile provides a mock function with given fields: respond, wg, key
func (_m *Storage) RemoveFile(respond chan<- error, wg *sync.WaitGroup, key string) {
	_m.Called(respond, wg, key)
}

// UploadFile provides a mock function with given fields: respond, wg, file, key, metadata
func (_m *Storage) UploadFile(respond chan<- error, wg *sync.WaitGroup, file io.ReadSeeker, key string, metadata map[string]string) {
	_m.Called(respond, wg, file, key, metadata)
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
