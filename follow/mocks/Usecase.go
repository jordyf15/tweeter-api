// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// FollowUser provides a mock function with given fields: followerID, followingID
func (_m *Usecase) FollowUser(followerID string, followingID string) error {
	ret := _m.Called(followerID, followingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(followerID, followingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnfollowUser provides a mock function with given fields: followerID, followingID
func (_m *Usecase) UnfollowUser(followerID string, followingID string) error {
	ret := _m.Called(followerID, followingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(followerID, followingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t mockConstructorTestingTNewUsecase) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
